//
//  MeasurementsService.swift
//  Cumulocity Client Library
//
//  Created by John Carter on 22/04/2020.
//  Copyright Â© 2020 John Carter. All rights reserved.
//

import Foundation
import Combine

let C8Y_MEASUREMENTS_API = "measurement/measurements"

/**
 Allows measurements to be fetched and posted to Cumulocity.
 Leverages the underlying api at endpoint '*\/measurement/measurements*' and described [here](https://cumulocity.com/guides/reference/measurements/)
 */
public class C8yMeasurementsService: JcConnectionRequest<C8yCumulocityConnection> {
    
    /**
    Used when fetching `C8yMeasurement`s to determines the maximum number allowed in a single request,
    default is 50
    */
    public var pageSize: Int = 50
        
    /**
     Returns a page `C8yPagedMeasurements` of `C8yMeasurement` instances generated by a device for the given internal c8y id.
     
     - parameter forSource: internal id of the `C8yManagedObject` that is the source of measurements to be returned
     - parameter pageNum: The page to be fetched, total pages can be found in  via the statistics property `statistics` defined by `C8yPageStatistics`  of the returned `C8yPagedMeasurements` object
     - parameter from: Date and time to search from
     - parameter to: Date and time to search upto (use Date() to specify up to now)
     - parameter reverseDateOrder: if false results are ordered date descending, specify true (default) for the opposite i.e. the last measurement will be first in the list
     - parameter completionHandler: callback function which will be called with the results
     - returns: task thread of http request
     */
    public func get(forSource id: String, pageNum: Int, from: Date, to: Date, reverseDateOrder: Bool) -> AnyPublisher<JcRequestResponse<C8yPagedMeasurements>, APIError> {
   
        return super._get(resourcePath: args(id, pageNum: pageNum, from: from, to: to, reverseOrder: reverseDateOrder, type: nil)).tryMap({ response in
            try JcRequestResponse<C8yPagedMeasurements>(response, dateFormatter: C8yManagedObject.dateFormatter())
        }).mapError({ error -> APIError in
            switch (error) {
            case let error as APIError:
                return error
            default:
                return APIError(httpCode: -1, reason: error.localizedDescription)
            }
        }).eraseToAnyPublisher()
    }
    
    /**
     Returns a page `C8yPagedMeasurements` of `C8yMeasurement` instances generated by a device for the given internal c8y id for the given measurement type
     
     - parameter forSource: internal id of the `C8yManagedObject` that is the source of measurements to be returned
     - parameter type: Identifies the type of measurement to be fetched
     - parameter pageNum: The page to be fetched, total pages can be found in  via the statistics property `statistics` defined by `C8yPageStatistics` of the returned `C8yPagedMeasurements` object
     - parameter from: Date and time to search from
     - parameter to: Date and time to search upto (use Date() to specify up to now)
     - parameter reverseDateOrder: if false results are ordered date descending, specify true (default) for the opposite i.e. the last measurement will be first in the list
     - parameter completionHandler: callback function which will be called with the results
     - returns: task thread of http request
     */
    public func get(forSource id: String, type: String, pageNum: Int, from: Date, to: Date, reverseDateOrder: Bool) -> AnyPublisher<JcRequestResponse<C8yPagedMeasurements>, APIError> {
        
        return super._get(resourcePath: args(id, pageNum: pageNum, from: from, to: to, reverseOrder: reverseDateOrder, type: type)).tryMap({ response in
            return try JcRequestResponse<C8yPagedMeasurements>(response, dateFormatter: C8yManagedObject.dateFormatter())
        }).mapError({ error -> APIError in
            switch (error) {
            case let error as APIError:
                return error
            default:
                return APIError(httpCode: -1, reason: error.localizedDescription)
            }
        }).eraseToAnyPublisher()
    }
    
    /**
    Returns an aggregrated series `C8yMeasurementSeries` of  measurements  generated by a device for the given internal c8y id for the given measurement type and sub value series
    
    - parameter forSource: internal id of the `C8yManagedObject` that is the source of measurements to be returned
    - parameter type: Identifies the type of measurement to be fetched
    - parameter series: Identifies the series of value from the measuirement type to be collated
    - parameter from: Date and time to search from
    - parameter to: Date and time to search upto (use Date() to specify up to now)
    - parameter agggregrationType: Limits the number of responses by grouping them into the specified time interval `AggregateType`
    - parameter reverseDateOrder: if false results are ordered date descending, specify true (default) for the opposite i.e. the last measurement will be first in the list
    - parameter completionHandler: callback function which will be called with the results
    - returns: task thread of http request
    */
    public func getSeries(forSource id: String, type: String, series: String, from: Date, to: Date, aggregrationType: C8yMeasurementSeries.AggregateType) -> AnyPublisher<JcRequestResponse<C8yMeasurementSeries>, APIError> {
        
        return super._get(resourcePath: args(id, from: from, to: to, reverseOrder: true, aggregationType: aggregrationType, type: type, series: series)).tryMap({ response in
            try JcRequestResponse<C8yMeasurementSeries>(response, dateFormatter: C8yManagedObject.dateFormatter())
        }).mapError({ error -> APIError in
            switch (error) {
            case let error as APIError:
                return error
            default:
                return APIError(httpCode: -1, reason: error.localizedDescription)
            }
        }).eraseToAnyPublisher()
    }
    
    /**
     Posts a set of new `C8yMeasurement` instances to cumulocity for the an associated device
     
     - parameter measurements: List of measurements to be posted to c8y
     - parameter completionHandler: callback function which will be called with the results, i.e. list of measurements updated with their c8y internal id
     - returns: task thread of http request
     - throws: If any measurement is missing mandatory fields, or if associated Managed Objects do not exist in c8y
     */
    public func post(_ measurements: [C8yMeasurement]) throws -> AnyPublisher<JcRequestResponse<Bool>, APIError> {

        return try super._execute(method: Method.POST, resourcePath: C8Y_MEASUREMENTS_API, contentType: "application/vnd.com.nsn.cumulocity.measurementCollection+json", request: C8yPagedMeasurements(measurements)).map({ response in
            return JcRequestResponse(response, content: response.status == .SUCCESS)
        }).eraseToAnyPublisher()
    }
    
    private func args(_ id: String, pageNum: Int, from: Date, to: Date, reverseOrder: Bool, type: String?) -> String {
        
        var path = "\(C8Y_MEASUREMENTS_API)?source=\(id)&revert=\(reverseOrder)&dateFrom=\(parseDate(from))&dateTo=\(parseDate(to))&pageSize=\(pageSize)"
        
        if (type != nil) {
            path = "\(path)&type=\(type!)"
        }
        
        return path
    }
    
    private func args(_ id: String, from: Date, to: Date, reverseOrder: Bool, aggregationType: C8yMeasurementSeries.AggregateType, type: String, series: String) -> String {
           
        return "\(C8Y_MEASUREMENTS_API)/series?source=\(id)&series=\(type).\(series.addingPercentEncoding(withAllowedCharacters: .alphanumerics)!)&revert=\(reverseOrder)&dateFrom=\(parseDate(from))&dateTo=\(parseDate(to))&aggregationType=\(aggregationType.rawValue)&pageSize=\(pageSize)"
    }
    
    private func parseDate(_ date: Date) -> String {
        
        return C8yManagedObject.dateFormatter().string(from: date).addingPercentEncoding(withAllowedCharacters: .alphanumerics)!
    }
}
